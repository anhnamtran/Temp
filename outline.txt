We want to talk about what we've learned.

So far we've had 3 different cost models, with one having two minor iterations:
1. The original cost model that is a prioritized ordering of the asymptotic
runtime, the max storage size, the true runtime, and the true size.
2. The maintenance cost model. It considers the cost of maintaining a state
variable when `op`s are ran. It has gone through two iterations:
    a. The sum of all maintenance costs for all ops.
    b. An unprioritized ordering of the maintenance costs, the runtime, and the
    max storage.
3. The frequency cost model that adds an extra parameter to queries and mutators
that allows the user to specify the frequency of those ops. This allows the cost
model to know which thing it should prioritize in optimizing.

Additions to cost models:
1. Freebies:
    - These are variables that the cost models are allowed to use for free, we
      added these as an extension to the original cost model, now it exists for
      all of them.
2. Maintenance cost:
    - This is specific to the maintenance cost model. With its addition, the
      cost model was also given information about various mutators that are
      available in the spec.
    - Maintenance cost then applies the mutators on to the expression it was
      given and compute their differences.
    - The size of the difference is then the maintenance cost.
3. Unprioritized order:
    - This method is specific to the (b) iteration of maintenance cost. It is
      the oposite of prioritized order (previously known as composite order) in
      that it combines several orders when it is unclear which is more
      important.
    - It is a slightly better approach to multi-objective optimization than just
      summing (as done in iteration (a) of maintenance cost).
4. Frequency cost:
    - This method is specific to the frequency cost model. It is a weighted sum
      of the runtime and the maintenance cost of expressions. The weights being
      the frequency of each of those.
    - This adds an extra parameter to both Op() and Query() throughout Cozy. The
      default being 1.
    - Subqueries created during synthesis inherit the frequency of their parent.

Improvementts, drawbacks, and solutions: 
1. Freebies: 
    - The addition of freebies fixed a bug that had to do with having
      arithmetic in state variables. 
    - The spec in question: 
            Incrementer:
                state x : Int
                query get()
                    x
                op increment()
                    x = x + 1;
    - Before freebies, Cozy had a heuristic rule that prevents it from storing
      (x + 1) as a state variable. Without that heuristic, Cozy views storing
      the incremented version of x as better than just storing x, this lead to
      Cozy storing every increment of x as a state variable. 
    - Adding Freebies allowed Cozy to see that it can use x for free, which
      let Cozy display the correct state variable behavior. 
    - The drawback comes from how to provide the freebies to Cozy. If we just
      used the Hints that are available for query generation, a problem
      arises: 
        - Cozy might change its mind on a state, in which case if it was
          previously marked free, it will remain free, even when Cozy has
          desided to discard it. 
    - To counteract that effect, we only choose specific things to be freebies. 
        - Specifically, we choose states that are maintained by a specific
          query. This makes it so that a state is only free for subqueries of a
          a query, and no others. 
2. Maintenance cost - summation: 
    - The addition of maintenance cost was meant to tackle a problem where Cozy is
      unable to "see" outside of its respective query. This means that it did
      not consider any of the mutators available to it. 
    - Maintenance cost is an effort toward a direction in which Cozy does
      consider its mutators when optimizing queries. 
    - The spec in question: 
            Spec:
                state things: Set<Thing>

                query countSharedColor(t : Thing)
                    assume t in things;
                    len [x | x <- things, x.color == t.color]

                op addThing(t : Thing)
                    things.add(t);
    - With this spec, Cozy will optimize the query such that it will store a
      map of Things mapped things with the same color. This implementation is
      good in just the scope of the query, but when the mutator is called, and
      an extra thing is added, not only will all the Things with the same color
      have to be updated, but the new added Thing will have to be updated as
      well, which is very inefficient when the amount of things grows very
      large. 
    - The hypothesis was that if we let Cozy consider the cost of maintaining a
      state using a mutator, it will choose a better solution. 
        - Specifically, the solution would then be to store a map from colors to
          all the Things with that color. This way when the amount of things
          grow to very large, the implmentation will still be efficient.
    - There are few drawbacks: 
        1. Instead of straight up saying that the second implementation is
        better, Cozy decides that they are ambiguous in terms of each other.
        This is mainly because now that Cozy is considering the mutator, it is
        able to find examples where the maintenance cost gives different results
        depending on the items inside of the original set. The examples,
        however, are of smaller sets, which might be the reason why it's
        failing.
        2. For cases where there is more than one mutator, for each expression,
        there's a chance that it has different mainteance cost depending on the
        mutator that was given to it. This can lead to very confusing results,
        as we're only summing things up.
    - The solution for the second problem leads to the second iteration of
      maintenance cost. 
3. Maintenance cost - unprioritized order: 

