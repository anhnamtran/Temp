We want to talk about what we've learned.

So far we've had 3 different cost models, with one having two minor iterations:
1. The original cost model that is a prioritized ordering of the asymptotic
runtime, the max storage size, the true runtime, and the true size.
2. The maintenance cost model. It considers the cost of maintaining a state
variable when `op`s are ran. It has gone through two iterations:
    a. The sum of all maintenance costs for all ops.
    b. An unprioritized ordering of the maintenance costs, the runtime, and the
    max storage.
3. The frequency cost model that adds an extra parameter to queries and mutators
that allows the user to specify the frequency of those ops. This allows the cost
model to know which thing it should prioritize in optimizing.

Additions to cost models:
1. Freebies:
    - These are variables that the cost models are allowed to use for free, we
      added these as an extension to the original cost model, now it exists for
      all of them.
2. Maintenance cost:
    - This is specific to the maintenance cost model. With its addition, the
      cost model was also given information about various mutators that are
      available in the spec.
    - Maintenance cost then applies the mutators on to the expression it was
      given and compute their differences.
    - The size of the difference is then the maintenance cost.
3. Unprioritized order:
    - This method is specific to the (b) iteration of maintenance cost. It is
      the oposite of prioritized order (previously known as composite order) in
      that it combines several orders when it is unclear which is more
      important.
    - It is a slightly better approach to multi-objective optimization than just
      summing (as done in iteration (a) of maintenance cost).
4. Frequency cost:
    - This method is specific to the frequency cost model. It is a weighted sum
      of the runtime and the maintenance cost of expressions. The weights being
      the frequency of each of those.
    - This adds an extra parameter to both Op() and Query() throughout Cozy. The
      default being 1.
    - Subqueries created during synthesis inherit the frequency of their parent.

Improvementts and drawbacks: 
1. Freebies: 
    - The addition of freebies fixed a bug that had to do with having
      arithmetic in state variables. 
    - The spec in question: 
            Incrementer:
                state x : Int
                query get()
                    x
                op increment()
                    x = x + 1;
    - Before freebies, Cozy had a heuristic rule that prevents it from storing
      (x + 1) as a state variable. Without that heuristic, Cozy views storing
      the incremented version of x as better than just storing x, this lead to
      Cozy storing every increment of x as a state variable. 
    - Adding Freebies allowed Cozy to see that it can use x for free, which
      let Cozy display the correct state variable behavior. 
    - The drawback comes from how to provide the freebies to Cozy. If we just
      used the Hints that are available for query generation, a problem
      arises: 
        - Cozy might change its mind on a state, in which case if it was
          previously marked free, it will remain free, even when Cozy has
          desided to discard it. 
    - To counteract that effect, we only choose specific things to be freebies. 
        - Specifically, we choose states that are maintained by a specific
          query. This makes it so that a state is only free for subqueries of a
          a query, and no others. 
2. 
